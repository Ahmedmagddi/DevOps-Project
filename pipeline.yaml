---
AWSTemplateFormatVersion: '2010-09-09'
Description: CodePipeline setup

Parameters:

  GitHubOAuthToken:
    Type: String
    Description: "Please enter your personal GitHub access token"
    NoEcho: true
    MinLength: 40
    MaxLength: 40
    AllowedPattern: '[a-z0-9]*'

  GitHubOwner:
    Type: String
    Description: "Please enter your GitHub username"
    AllowedPattern: "[A-Za-z0-9-]+"

  GitHubRepo:
    Type: String
    Description: "Please enter your GitHub Repo name"
    Default: DevOps-Project
    AllowedPattern: "[A-Za-z0-9-]+"

  # Please enter your new branch name while creating the stack if you'll
  # change it to another branch after forking
  GitHubBranch:
    Type: String
    Description: "Please enter your GitHub Repo branch"
    Default: main
    AllowedPattern: "[A-Za-z0-9-]+"

  # Cloudformation stack that will be used to build the testing env
  # and deploy code to it
  TestingStackName:
    Type: String
    Default: Testing-environment

  TakeSubnetIdFromUser:
    Type: AWS::EC2::Subnet::Id
    Description: "Please choose a subnet from default VPC"


Resources:

  Repository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: react-spring-app

  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Location:
          Ref: PipelineArtifactsBucket
        Type: S3
      Source:
        Location:
          Fn::Sub: "${PipelineArtifactsBucket}/*.zip"
        Type: S3
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:3.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: REPO_URL
          Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com"
        - Name: REPO_NAME
          Value:
            Ref: Repository
        - Name: SubnetID
          Value: !Ref TakeSubnetIdFromUser
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildServiceRole

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactsBucket
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
      - Name: Source
        Actions:
        - Name: Source
          InputArtifacts: []
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: 1
            Provider: GitHub
          OutputArtifacts:
           - Name: SourceCode
          Configuration:
            Owner: !Ref GitHubOwner
            Repo: !Ref GitHubRepo
            Branch: !Ref GitHubBranch
            PollForSourceChanges: false
            OAuthToken: !Ref GitHubOAuthToken
          RunOrder: 1

      - Name: Build
        Actions:
         - Name: CodeBuild
           InputArtifacts:
             - Name: SourceCode
           ActionTypeId:
             Category: Build
             Owner: AWS
             Version: '1'
             Provider: CodeBuild
           OutputArtifacts:
            - Name: template-for-child-stack
           Configuration:
             ProjectName: !Ref CodeBuildProject
           RunOrder: 1

      - Name: Deploy-to-test-env
        Actions:
        - Name: CloudFormationDeploy
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Provider: CloudFormation
            Version: '1'
          InputArtifacts:
            - Name: SourceCode
            - Name: template-for-child-stack
          Configuration:
            ActionMode: CREATE_UPDATE
            Capabilities: CAPABILITY_NAMED_IAM
            TemplateConfiguration: 'template-for-child-stack::template-parameter.json'
            RoleArn: !GetAtt CloudformationRole.Arn
            StackName: !Ref TestingStackName
            TemplatePath: !Sub "SourceCode::testing-env.yaml"
          RunOrder: 1

  GithubWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      RegisterWithThirdParty: 'true'
      Filters:
      - JsonPath: "$.ref"
        MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref CodePipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt CodePipeline.Version

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CloudformationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: cloudformation.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${PipelineArtifactsBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
